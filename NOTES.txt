
#! NOTES

1. Know about "abc" module which is used to implement Abstract Base Classes (ABC) in Python.
2. Know about abstract method and static method in Python.

** Use "https://julius.ai/" for performing EDA tasks by just uploading the dataset and asking it to do certain tasks.
Example -> "
I uploaded the file: AmesHousing.csv
How many columns are there and which columns contains space or null value? Give me those column names and plot a graph to show the numbers too
"

#? Always use Factory Design Pattern in your project i.e concept of using interface and factory.
* Refer explanations/factory_design_patter.py

"
Abstract Class: A class that serves as a template and cannot be instantiated directly. It may contain both abstract and concrete methods.
Abstract Method: A method within an abstract class that must be implemented by any subclass. It has no implementation in the abstract class itself.
"

Always ensure these key elements in your project:
* Type Checks
* Readability
* Handling Errors
* Documentation
* Testing

#? Always use Strategy Design Pattern in your project i.e concept of using interface, strategy and context(helps to switch different strategies).
* Refer explanations/strategy_design_patter.py

#TODO => Start EDA in analysis/EDA.ipynb

1. Always split the functionalities into different files and import and use the required ones to perform EDA. This way the main code file remains clean and readable.

#! Why we did univariate analysis?

Here are some specific reasons why we did univariate analysis:

* To understand the distribution of the target variable. This is important because it helps us to understand the range of values that the model will need to predict. 
* To identify any outliers in the data. Outliers can have a significant impact on the performance of machine learning models. By identifying outliers, we can take steps to either remove them from the data or treat them appropriately.
* To understand the relationships between the features and the target variable. This can help us to identify which features are most important for predicting the target variable.
* To identify any missing values in the data. Missing values can also have a significant impact on the performance of machine learning models. By identifying missing values, we can take steps to either impute them or remove them from the data.

#! Why we did bivariate analysis?

Bivariate analysis in EDA is used to explore the relationships between pairs of variables. This helps to identify correlations, patterns, and dependencies that might influence the target variable.

Here are three key reasons why bivariate analysis is conducted:

* Correlation analysis: To measure the strength and direction of the relationship between two variables. This can help identify features that are highly correlated with the target variable, which can be useful for feature selection.
* Pattern recognition: To discover trends, patterns, or associations between variables. This can provide insights into the underlying mechanisms driving the target variable.
* Hypothesis testing: To test hypotheses about the relationships between variables. For example, you might want to test whether there is a significant difference in the mean of a target variable between two groups.

#! Why we did multivariate analysis?

Multivariate analysis:

* Examines relationships between multiple variables simultaneously. For example, what is the relationship between the number of bedrooms, number of bathrooms, and the sale price of a house?
* Uncovers complex interactions not visible in bivariate analysis. For example, how does the relationship between the number of bedrooms and the sale price change when the number of bathrooms is considered?
* Predicts outcomes based on multiple predictors. For example, given the number of bedrooms, number of bathrooms, and the square footage of a house, what is the predicted sale price?
* Reduces dimensionality for simpler analysis. For example, instead of analyzing 10 variables, a multivariate analysis can be used to reduce the dimensionality to 2 or 3 variables that capture most of the information.

-------------------------------------------

Now we will install all the libraries and dependencies for the project:

1. python3.11 -m venv venv2                     # Using 3.11.4 version as ZenML works till version 3.11
2. pip install -r requirements.txt

The project can only be executed with a ZenML stack that has an MLflow experiment tracker and model deployer as a component. Configuring a new stack with the two components are as follows:

3. zenml integration install mlflow -y
4. zenml experiment-tracker register mlflow_tracker --flavor=mlflow
5. zenml model-deployer register mlflow --flavor=mlflow
6. zenml stack register local-mlflow-stack -a default -o default -d mlflow -e mlflow_tracker --set

"
(venv2) PS D:\prices-predictor-system> zenml stack register local-mlflow-stack -a default -o default -d mlflow -e mlflow_tracker --set
Stack 'local-mlflow-stack' successfully registered!
          Stack Configuration
┏━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┓
┃ COMPONENT_TYPE     │ COMPONENT_NAME ┃
┠────────────────────┼────────────────┨
┃ ORCHESTRATOR       │ default        ┃
┠────────────────────┼────────────────┨
┃ MODEL_DEPLOYER     │ mlflow         ┃
┠────────────────────┼────────────────┨
┃ EXPERIMENT_TRACKER │ mlflow_tracker ┃
┠────────────────────┼────────────────┨
┃ ARTIFACT_STORE     │ default        ┃
┗━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┛
      'local-mlflow-stack' stack       
No labels are set for this stack.
Stack 'local-mlflow-stack' with id 'b0f1f947-7b84-4eeb-b9c7-33696164baf3' is owned by user default.
Active global stack set to:'local-mlflow-stack'
"

-------------------------------------------

#! Now we will start with making pipelines